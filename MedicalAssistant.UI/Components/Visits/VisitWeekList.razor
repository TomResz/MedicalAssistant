@using MedicalAssistant.UI.Models.Visits
<MudGrid>
	<MudItem xs="12">
		<MudText Typo="Typo.h4" Class="text-center">@ListName.ToUpper()</MudText>
	</MudItem>
</MudGrid>
@foreach (var day in _days)
{	
	@if (GroupedVisits[day].Any())
	{
		<MudPaper Elevation="4" Class="pa-4 my-2 mx-2">
			<MudGrid>
				<MudItem xs="12">
					<MudText Typo="Typo.h6" Align="Align.Center"> @DayOfWeekToString(day)</MudText>
				</MudItem>

				@foreach (var visit in GroupedVisits[day].OrderBy(x=>x.Date))
				{
					<MudItem xs="12" sm="6">
						<VisitItem Visit="visit" />
					</MudItem>
				}
			</MudGrid>
		</MudPaper>
	}

}

@code {

	[Parameter]
	public string ListName { get; set; }

	[Parameter]
	public IReadOnlyList<VisitDto> Visits { get; set; }

	private Dictionary<DayOfWeek, List<VisitDto>> GroupedVisits { get; set; }

	private readonly IReadOnlyList<DayOfWeek> _days =
	[
		DayOfWeek.Monday,
		DayOfWeek.Tuesday,
		DayOfWeek.Wednesday,
		DayOfWeek.Thursday,
		DayOfWeek.Friday,
		DayOfWeek.Saturday,
		DayOfWeek.Sunday
	];


	private string DayOfWeekToString(DayOfWeek day)
		=> day switch
		{
			DayOfWeek.Monday => Translations.Monday,
			DayOfWeek.Tuesday => Translations.Tuesday,
			DayOfWeek.Wednesday => Translations.Wednesday,
			DayOfWeek.Thursday => Translations.Thursday,
			DayOfWeek.Friday => Translations.Friday,
			DayOfWeek.Saturday => Translations.Saturday,
			_ => Translations.Sunday
		};

	protected override Task OnInitializedAsync()
	{
		GroupedVisits = new Dictionary<DayOfWeek, List<VisitDto>>();

		foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
		{
			GroupedVisits[day] = new List<VisitDto>();
		}

		foreach (var visit in Visits)
		{
			DayOfWeek dayOfWeek = visit.Date.DayOfWeek;
			GroupedVisits[dayOfWeek].Add(visit);
		}

		return Task.CompletedTask;
	}
}

