@using MedicalAssistant.UI.Models.MedicalNotes
@using MedicalAssistant.UI.Shared.Services.Abstraction

@if (_loading)
{
    <div class="d-flex flex-column w-100 h-100">
        <LoadingSkeletonComponent Class="pa-4 flex-grow-1"/>
    </div>
}
else
{
    @if (_notes.Count == 0)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100%; color: #888888; padding: 16px; text-align: center;">
            <MudIcon Icon="@Icons.Material.Outlined.Note" Size="Size.Large" Style="margin-right: 8px; color: #FF5722;"/>
            <MudText Typo="Typo.h6" Class="fade-in">@Translations.NoNotes</MudText>
        </div>
    }
    else
    {   
        <MudText Class="mx-3" GutterBottom="true" Color="Color.Primary" Typo="Typo.h5" Align="Align.Center">@Translations.Notes</MudText>
        <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelineAlign="TimelineAlign.Start">
            @foreach (var note in _notes)
            {
                <MudTimelineItem TimelineAlign="TimelineAlign.Start">
                    <ItemOpposite>

                        <MudTooltip Text="@Translations.ShowDetails">
                            <MudButton Color="Color.Transparent" Style="text-align: left; cursor: pointer;"
                                       OnClick="@GoToDetails">
                                <div class="text-right">
                                    <MudText Typo="Typo.body1">@note.Note</MudText>
                                </div>
                            </MudButton>
                        </MudTooltip>
                     
                    </ItemOpposite>
                    <ItemContent>
                        <MudText Typo="Typo.h6" GutterBottom="true" Align="Align.Right">
                            @note.CreatedAt.ToString("HH:mm")
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
            }
        </MudTimeline>
    }
}


@code {
    private bool _loading = true;
    [Inject]
    private IMedicalNoteRepository Repository { get; set; }
    
    [Inject]
    private ILocalTimeProvider LocalTimeProvider { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private List<NoteDto> _notes = [];
    
    protected override async Task OnInitializedAsync()
    {
        var response = await Repository.GetCurrents(await LocalTimeProvider.CurrentDate());

        if (response.IsSuccess)
        {
            _notes = response.Value!;
        }

        _loading = false;
    }

    private void GoToDetails() => NavigationManager.NavigateTo("/notes");
}