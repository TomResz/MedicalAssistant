@page "/login"
@inject IUserAuthService userService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@layout LoginRegisterLayout
@using MedicalAssist.UI.Components
@using MedicalAssist.UI.Models.Login

@using MedicalAssist.UI.Shared.Services.Abstraction
@using MedicalAssist.UI.Shared.Services.Auth


<MudForm @ref="form" Model="user" Validation="@(_validator.ValidateValue)" ValidationDelay="0" Class="mx-0 px-0">
	<MudCardContent>
		<MudText Align="@Align.Center" Typo="Typo.h3" Color="Color.Primary">Logowanie</MudText>

		<MudTextField @bind-Value="user.Email"
					  Label="Email"
					  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Email"
					  Variant="MudBlazor.Variant.Filled"
					  Class="mb-4"
					  Immediate="true"
					  For="@(()=> user.Email)"
					  AdornmentColor="Color.Primary"/>
		<MudTextField @bind-Value="user.Password"
					  Label="Hasło" InputType="@passwordInputType"
					  Adornment="Adornment.End" AdornmentIcon="@passwordIcon"
					  OnAdornmentClick="TogglePasswordVisibility"
					  Variant="MudBlazor.Variant.Filled"
					  Class="mb-4"
					  Immediate="true"
					  For="@(()=> user.Password)" 
					  AdornmentColor="Color.Primary" />
		<MudCardActions Class="d-flex justify-center flex-wrap">
			<MudButton Variant="MudBlazor.Variant.Outlined"
					   Color="Color.Primary" OnClick="@(async () => await LoginAsync())"
					   Class="mb-2 mx-2"
					   StartIcon="@Icons.Material.Filled.Login"
					   IconSize="Size.Large"
					   FullWidth="true">
				Zaloguj
			</MudButton>
			<FacebookAuthBtn />
			<GoogleAuthBtn />
		</MudCardActions>
	</MudCardContent>
</MudForm>

@code {
	private MudForm form;
	private LoginModel user = new();
	private InputType passwordInputType = InputType.Password;
	private string passwordIcon = Icons.Material.Filled.VisibilityOff;

	private LoginModelValidator _validator = new();
	private async Task LoginAsync()
	{
		await form.Validate();
		if (form.IsValid)
		{
			var response = await userService.SignIn(user);

			if (response is not null)
			{
				await (AuthenticationStateProvider as MedicalAssistAuthenticationStateProvider)!.AuthenticateAsync(response);
				Navigation.NavigateTo("/");
			}
		}
	}

	private void TogglePasswordVisibility()
	{
		if (passwordInputType == InputType.Password)
		{
			passwordInputType = InputType.Text;
			passwordIcon = Icons.Material.Filled.Visibility;
		}
		else
		{
			passwordInputType = InputType.Password;
			passwordIcon = Icons.Material.Filled.VisibilityOff;
		}
	}
}