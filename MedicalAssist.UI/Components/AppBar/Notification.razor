@using MedicalAssist.UI.Shared.Options
@using MedicalAssist.UI.Shared.Services.Abstraction
@using Microsoft.AspNetCore.SignalR.Client
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.Extensions.Options
@implements IAsyncDisposable
@inject IHubTokenService HubTokenService
@inject IOptions<APIOptions> APIOptions
@inject ISnackbar Snackbar

@if (_messages.Count > 0)
{
	<div class="mt-3">
		<MudBadge Content="@_messages.Count()" Color="Color.Primary" Overlap="true" Class="mr-5 my-1" Max="9">
			<MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Style="padding-right:0px; padding-top:0px;" />
		</MudBadge>
	</div>
}
else
{
	<MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Class="mr-2" />
}

@code {
	private readonly List<string> _messages = new();
	private HubConnection? _hubConnection;

	protected override async Task OnInitializedAsync()
	{
		var uri = APIOptions.Value.NotificationHubUrl;
		Console.WriteLine(uri);
		_hubConnection = new HubConnectionBuilder()
				.WithUrl(uri,
					options => options.AccessTokenProvider = async () => await HubTokenService.GetJwt())
				.WithAutomaticReconnect()
				.Build();

		_hubConnection.On<string>("ReceiveNotification", message =>
		{
			_messages.Add(message);
			Snackbar.Add(message, MudBlazor.Severity.Normal);
			InvokeAsync(StateHasChanged);
		});

		await _hubConnection.StartAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if(_hubConnection is not null)
		{
			await _hubConnection.DisposeAsync();
		}
	}
}